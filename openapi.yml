openapi: 3.0.1
info:
  title: ShopDB API
  description: This is the API for shopdb2
  version: v2.1
servers:
- url: https://shop.gatrobe.de/api
tags:
- name: rank
  description: Access available ranks
- name: turnover
  description: Turnovers describe all income and expenses, independent of purchases, etc.
paths:
  /:
    get:
      tags:
      - maintenance
      summary: Returns the current state of the api
      responses:
        200:
          description: State was successfully retrieved
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Backend is online.
  /backups:
    get:
      tags:
      - backup
      summary: Returns a dict holding all backups and the timestamp of the latest
        one.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  backups:
                    type: array
                    items:
                      type: string
                      example: 2019/02/07/shop-db_2019-02-07_15-00.dump
                  latest:
                    type: string
                    format: date-time
      security:
      - bearerAuth: []
  /deposits:
    get:
      tags:
      - deposit
      summary: Returns a list of all deposits.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deposit'
      security:
      - bearerAuth: []
    post:
      tags:
      - deposit
      summary: Add a new deposit
      operationId: addDeposit
      requestBody:
        description: Deposit object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
                user_id:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /deposits/batch:
    post:
      tags:
      - deposit
      summary: Add a batch of new deposits
      description: Iterates over the given user ids and creates a deposit for each
        of them
      operationId: addDeposits
      requestBody:
        description: List of user ids, the amount as well as the comment
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
                user_ids:
                  type: array
                  items:
                    type: integer
                    format: int64
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created batch deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /deposits/{deposit-id}:
    parameters:
    - name: deposit-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - deposit
      summary: Returns the deposit with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  timestamp:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
                    format: int64
                  amount:
                    type: integer
                    format: int64
                  comment:
                    type: string
                  revoked:
                    type: boolean
                  revokehistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/Revoke'
    put:
      tags:
      - deposit
      summary: Updates a deposit
      description: This can only be done by an admin.
      operationId: updateDeposit
      requestBody:
        description: Updated deposit revocation state
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Deposit was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /financial_overview:
    get:
      tags:
      - financial overview
      summary: Returns the current financial overview of the shopdb instance
      description: The financial status of the entire project can be retrieved via
        this route. All purchases, deposits, payoffs, refunds and replenishmentcollections
        are used for this purpose. The items are cleared once to a number indicating
        whether the community has debt or surplus money. In addition, the individual
        items are returned separately in order to get a better breakdown of the items.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_balance:
                    type: integer
                    format: int64
                  incomes:
                    type: object
                    properties:
                      Purchases:
                        minimum: 0
                        type: integer
                        format: int64
                      Deposits:
                        minimum: 0
                        type: integer
                        format: int64
                      Turnovers:
                        minimum: 0
                        type: integer
                        format: int64
                      Replenishments:
                        minimum: 0
                        type: integer
                        format: int64
                      Refunds:
                        minimum: 0
                        type: integer
                        format: int64
                      Payoffs:
                        minimum: 0
                        type: integer
                        format: int64
                      Stocktakings:
                        minimum: 0
                        type: integer
                        format: int64
                  expenses:
                    type: object
                    properties:
                      Purchases:
                        minimum: 0
                        type: integer
                        format: int64
                      Deposits:
                        minimum: 0
                        type: integer
                        format: int64
                      Turnovers:
                        minimum: 0
                        type: integer
                        format: int64
                      Replenishments:
                        minimum: 0
                        type: integer
                        format: int64
                      Refunds:
                        minimum: 0
                        type: integer
                        format: int64
                      Payoffs:
                        minimum: 0
                        type: integer
                        format: int64
                      Stocktakings:
                        minimum: 0
                        type: integer
                        format: int64
      security:
      - bearerAuth: []
  /images:
    get:
      tags:
      - image
      summary: A defaullt picture can be requested via this route.
      responses:
        200:
          description: A png file
          content:
            '*/*':
              schema:
                type: string
                description: the default product image
                format: binary
  /images/{image-name}:
    get:
      tags:
      - image
      summary: A picture can be requested via this route.
      description: If the image is not found or if the image name is empty, a default
        image will be returned.
      parameters:
      - name: image-name
        in: path
        description: 'can be left empty to retrieve the default image'
        required: true
        schema:
          type: string
      responses:
        200:
          description: A png file
          content:
            '*/*':
              schema:
                type: string
                description: the requested product image
                format: binary
  /login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFuaXNoIn0.JX4_nxeJAY8lOSrTiyzU43eKt-qEWXtNhkPwfLWanUY"
  /maintenance:
    post:
      tags:
      - maintenance
      summary: Set the maintenance state
      operationId: toggleMaintenance
      requestBody:
        description: "contains the new state"
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: boolean
        required: true
      responses:
        200:
          description: Deposit was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Turned maintenance mode off."
      security:
      - bearerAuth: []
  /payoffs:
    get:
      tags:
      - payoff
      summary: Returns a list of all payoffs.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payoff'
      security:
      - bearerAuth: []
    post:
      tags:
      - payoff
      summary: Creates a new Payoff.
      operationId: addPayoff
      requestBody:
        description: "the amount paid out as well as the reason"
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                comment:
                  type: string
        required: true
      responses:
        200:
          description: Payout was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Created payoff."
      security:
      - bearerAuth: []
  /payoffs/{payoff-id}:
    parameters:
    - name: payoff-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - payoff
      summary: Returns the payoff with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  timestamp:
                    type: string
                    format: date-time
                  amount:
                    type: integer
                    format: int64
                  comment:
                    type: string
                  revoked:
                    type: boolean
                  revokehistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/PayoffRevoke'
    put:
      tags:
      - payoff
      summary: Updates a payoff
      description: This can only be done by an admin.
      operationId: updatePayoff
      requestBody:
        description: Updated payoff revocation state
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Deposit was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated deposit.
        401:
          description: error state
          content: {}
      x-codegen-request-body-name: body
      security:
      - bearerAuth: []
  /products:
    get:
      tags:
      - product
      summary: Returns a list of all products.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - bearerAuth: []
    post:
      tags:
      - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: Product object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                  format: int64
                tags:
                  type: array
                  items:
                    type: integer
                    format: int64
                active:
                  type: boolean
                barcode:
                  type: string
                countable:
                  type: boolean
                imagename:
                  type: string
                revocable:
                  type: boolean
        required: true
      responses:
        200:
          description: Product was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created Product.
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /products/{product-id}:
    parameters:
    - name: product-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - product
      summary: Returns the product with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
      - product
      summary: Updates a product
      description: This can only be done by an admin.
      operationId: updateProduct
      requestBody:
        description: All following properties within the body are optional.
        content:
          '*/*':
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                  format: int64
                barcode:
                  type: string
                imagename:
                  type: string
                countable:
                  type: boolean
                revocable:
                  type: boolean
        required: true
      responses:
        201:
          description: Product was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated product.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /products/{product-id}/pricehistory:
    parameters:
    - name: product-id
      in: path
      required: true
      schema:
        type: integer
    - name: end_date
      in: query
      required: false
      schema:
        type: string
        format: date-time
    - name: start_date
      in: query
      required: false
      schema:
        type: string
        format: date-time
    get:
      tags:
      - product
      summary: Returns the pricehistory of the requested product id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                    price:
                      type: integer
                      format: int64
      security:
      - bearerAuth: []
  /purchases:
    get:
      tags:
      - purchase
      summary: Returns a list of all purchases.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
    post:
      tags:
      - purchase
      summary: Add a new purchase
      operationId: addPurchase
      requestBody:
        description: Purchase object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                product_id:
                  type: integer
                  format: int64
                amount:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: Purchase was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Purchase created.
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /purchases/{purchase-id}:
    parameters:
    - name: purchase-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - purchase
      summary: Returns the purchase with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Purchase'
                - type: object
                  properties:
                    revokehistory:
                      type: array
                      items:
                        $ref: '#/components/schemas/PurchaseRevoke'
    put:
      tags:
      - purchase
      summary: Updates a purchase
      description: This can only be done by an admin.
      operationId: updatePurchase
      requestBody:
        description: All following properties within the body are optional.
        content:
          '*/*':
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Product was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated product.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /ranks:
    get:
      tags:
      - rank
      summary: Returns a list of all ranks.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rank'
  /refunds:
    get:
      tags:
      - refunds
      summary: Returns a list of all refunds.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Refund'
                - type: object
                  properties:
                    revokehistory:
                      type: array
                      items:
                        $ref: '#/components/schemas/RefundRevoke'
    post:
      tags:
      - refund
      summary: Add a new refund
      operationId: addRefund
      requestBody:
        description: Refund object that needs to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                total_price:
                  type: integer
                  format: int64
                comment:
                  type: string
        required: true
      responses:
        200:
          description: Refund was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created Refund.
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /refunds/{refund-id}:
    parameters:
    - name: refund-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - refund
      summary: Returns the refund with the requested id.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
    put:
      tags:
      - refund
      summary: Updates a refund
      description: This can only be done by an admin.
      operationId: updateRefund
      requestBody:
        description: All following properties within the body are optional.
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: Refund was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated refund.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /register:
    post:
      tags:
      - user
      summary: Create user
      description: Registration of new users.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        200:
          description: User was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created User.
  /replenishmentcollections:
    get:
      tags:
      - replenishmentcollection
      summary: Returns a list of all ReplenishmentCollections.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplenishmentCollectionBrief'
      security:
      - bearerAuth: []
    post:
      tags:
      - replenishmentcollection
      summary: Creates a new ReplenishmentCollection
      description: Insert a new replenishmentcollection.
      operationId: createReplenishmentCollection
      requestBody:
        description: Create a ReplenishmentCollection object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReplenishmentCollectionNew'
        required: true
      responses:
        201:
          description: ReplenishmentCollection was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created replenishmentcollection.
      security:
      - bearerAuth: []
  /replenishmentcollections/{replenishmentcollections-id}:
    parameters:
    - name: replenishmentcollections-id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - replenishmentcollection
      summary: Returns a ReplenishmentCollections by id
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ReplenishmentCollection'
                - type: object
                  properties:
                    revokehistory:
                      type: array
                      items:
                        $ref: '#/components/schemas/ReplenishmentCollectionRevoke'
      security:
      - bearerAuth: []
    put:
      tags:
      - replenishmentcollection
      summary: Updates a replenishmentcollection
      description: This can only be done by an admin.
      operationId: updateReplenishmentCollection
      requestBody:
        description: All following properties within the body are optional.
        content:
          '*/*':
            schema:
              type: object
              properties:
                comment:
                  type: string
                revoked:
                  type: boolean
                timestamp:
                  type: string
                  format: date-time
        required: true
      responses:
        201:
          description: ReplenishmentCollection was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated replenishmentcollection.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /replenishments/{replenishment-id}:
    parameters:
    - name: replenishment-id
      in: path
      required: true
      schema:
        type: integer
    put:
      tags:
      - replenishment
      summary: Updates a replenishment
      description: This can only be done by an admin.
      operationId: updateReplenishment
      requestBody:
        description: All following properties within the body are optional.
        content:
          '*/*':
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int64
                revoked:
                  type: boolean
                total_price:
                  type: integer
                  format: int64
        required: true
      responses:
        201:
          description: Replenishment was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated replenishment.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /stocktakingcollections/balance:
    parameters:
    - name: start_id
      in: query
      description: The StocktakingCollection to begin the balance at
      required: true
      schema:
        type: integer
        format: int64
    - name: end_id
      in: query
      description: The StocktakingCollection to end the balance at
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - stocktakingcollection
      summary: Returns the balance between two stocktakingcollections.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
      security:
      - bearerAuth: []
  /stocktakingcollections/template:
    get:
      tags:
      - stocktakingcollection
      summary: get a templatefile
      description: This route can be used to retrieve a template to print out for a stocktaking. It lists all the products that must be included in the stocktaking.
      responses:
        200:
          description: A pdf file
          content:
            'application/pdf':
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
  /stocktakingcollections:
    get:
      tags:
      - stocktakingcollection
      summary: Returns a list of all StocktakingCollections.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StocktakingCollectionBrief'
      security:
      - bearerAuth: []
    post:
      tags:
      - stocktakingcollection
      summary: Creates a new StocktakingCollection
      description: Insert a new StocktakingCollection.
      operationId: createStocktakingCollection
      requestBody:
        description: Create a StocktakingCollection object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StocktakingCollectionNew'
        required: true
      responses:
        201:
          description: StocktakingCollection was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created stocktakingcollection.
      security:
      - bearerAuth: []
  /stocktakingcollections/{stocktakingcollection-id}:
    parameters:
    - name: stocktakingcollection-id
      in: path
      required: true
      schema:
        type: integer
    get:
      tags:
      - stocktakingcollection
      summary: Returns a StocktakingCollection by id
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StocktakingCollection'
      security:
      - bearerAuth: []
    put:
      tags:
      - stocktakingcollection
      summary: Updates a stocktakingcollection
      description: This can only be done by an admin.
      operationId: updateStocktakingCollection
      requestBody:
        description: The revoked property is mandatory.
        content:
          '*/*':
            schema:
              type: object
              properties:
                revoked:
                  type: boolean
        required: true
      responses:
        201:
          description: StocktakingCollection was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated stocktakingcollection.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /stocktakings/{stocktaking-id}:
    parameters:
    - name: stocktaking-id
      in: path
      required: true
      schema:
        type: integer
    put:
      tags:
      - stocktaking
      summary: Updates a stocktaking
      description: This can only be done by an admin.
      operationId: updateStocktaking
      requestBody:
        description: The count property is mandatory.
        content:
          '*/*':
            schema:
              type: object
              properties:
                count:
                  type: integer
                  format: int64
        required: true
      responses:
        201:
          description: Stocktaking was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated stocktaking.
                  updated_fields:
                    type: array
                    items:
                      type: string
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /tagassignment/add:
    post:
      tags:
      - tag
      - product
      summary: Assigns a tag to  or from a product
      description: Assign a tag.
      operationId: assignTag
      requestBody:
        description: The ids of the tag and the product to connect.
        content:
          '*/*':
            schema:
              type: object
              required:
                - tag_id
                - product_id
              properties:
                tag_id:
                  type: integer
                  format: int64
                product_id:
                  type: integer
                  format: int64
        required: true
      responses:
        201:
          description: Tag has been sucessfully assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag assignment has been added.
      security:
      - bearerAuth: []
  /tagassignment/remove:
    post:
      tags:
      - tag
      - product
      summary: Removes a tag to  or from a product
      description: Remove a tag.
      operationId: removeTag
      requestBody:
        description: The ids of the tag and the product to connect.
        content:
          '*/*':
            schema:
              type: object
              required:
                - tag_id
                - product_id
              properties:
                tag_id:
                  type: integer
                  format: int64
                product_id:
                  type: integer
                  format: int64
        required: true
      responses:
        201:
          description: Tag was sucessfully removed from product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag assignment has been removed.
      security:
      - bearerAuth: []
  /tags:
    get:
      tags:
      - tag
      summary: List all tags
      description: Every product has one or more of these.
      operationId: listTags
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        401:
          description: error state
          content: {}
    post:
      tags:
      - tag
      summary: Creates a new Tag
      description: Insert a new Tag.
      operationId: createTag
      requestBody:
        description: Create a Tag object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TagUpdateable'
        required: true
      responses:
        201:
          description: Tag was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created tag.
      security:
      - bearerAuth: []
  /tags/{tag-id}:
    parameters:
    - name: tag-id
      in: path
      description: The id
      required: true
      schema:
        type: integer
        format: int64
    delete:
      tags:
      - tag
      summary: Delete tag
      description: This can only be done by an admin.
      operationId: deleteTag
      responses:
        401:
          description: error state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTagError'
      security:
      - bearerAuth: []
    get:
      tags:
      - tag
      summary: Show one tag
      description: Every product has one or more of these.
      operationId: showTag
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    put:
      tags:
      - tag
      summary: Updates a tag
      description: This can only be done by an admin.
      operationId: updateTag
      requestBody:
        description: The name property is mandatory.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TagUpdateable'
        required: true
      responses:
        201:
          description: Tag was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated tag.
                  updated_fields:
                    type: array
                    items:
                      type: string
                      example: name
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /turnovers:
    get:
      tags:
      - turnover
      summary: List all turnovers
      operationId: listTurnovers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/TurnoverBase'
                    - type: object
                      properties:
                        admin_id:
                          type: integer
                          format: int64
        401:
          description: error state
          content: {}
    post:
      tags:
      - turnover
      summary: Creates a new Turnover
      description: Insert a new Turnover.
      operationId: createTurnover
      requestBody:
        description: Create a Turnover object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TurnoverNew'
        required: true
      responses:
        201:
          description: Turnover was sucessfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created turnover.
      security:
      - bearerAuth: []
  /turnovers/{turnover-id}:
    parameters:
    - name: turnover-id
      in: path
      description: The id of the turnover to interact with
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - turnover
      summary: Show one turnover
      description: Turnovers describe all income and expenses, independent of purchases, etc.
      operationId: showTurnover
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TurnoverBase'
                  - type: object
                    properties:
                      revokehistory:
                        type: array
                        items:
                          $ref: '#/components/schemas/TurnoverRevoke'
    put:
      tags:
      - turnover
      summary: Updates a turnover
      description: This can only be done by an admin.
      operationId: updateTurnover
      requestBody:
        description: The revoked property is mandatory.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TurnoverUpdateable'
        required: true
      responses:
        201:
          description: Turnover was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated turnover.
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /upload:
    post:
      tags:
      - image
      summary: One can upload pictures via this route.
      description: The valid file formats can be set in the configuration under "VALID_EXTENSIONS".
      operationId: createImage
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
        required: true
      responses:
        201:
          description: Image uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image uploaded successfully.
                  filename:
                    type: string
      security:
      - bearerAuth: []
  /users:
    get:
      tags:
      - user
      summary: Returns a list of all users.
      description: Requesting this ressource while being an authenticated admin, yields more detailed results.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/UserBrief'
                - type: array
                  items:
                    $ref: '#/components/schemas/UserUnpriv'
  /users/{user-id}:
    parameters:
    - name: user-id
      in: path
      description: The users primary identifier
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - user
      summary: Returns a user
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        401:
          description: error state
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by an admin.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        401:
          description: error state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserError'
    put:
      tags:
      - user
      summary: Updates a user
      description: This can only be done by an admin.
      operationId: updateUser
      requestBody:
        description: Updating the password is only successful if password and its repetition match.
        content:
          '*/*':
            schema:
              allOf:
                - $ref: '#/components/schemas/UserModify'
                - type: object
                  properties:
                    password:
                      type: string
                    password_repeat:
                      type: string
        required: true
      responses:
        201:
          description: User was sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated user.
                  updated_fields:
                    type: array
                    items:
                      type: string
                      example: is_admin
        401:
          description: error state
          content: {}
      security:
      - bearerAuth: []
  /users/{user-id}/deposits:
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - user
      summary: Returns a list of a users deposits.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepositOfUser'
  /users/{user-id}/favorites:
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - user
      summary: Returns a list of a users favorite products ids.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
  /users/{user-id}/purchases:
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - user
      summary: Returns a list of a users purchases.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchaseOfUser'
  /users/{user-id}/refunds:
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    get:
      tags:
      - user
      summary: Returns a list of a users refunds.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RefundOfUser'
  /verifications:
    get:
      tags:
      - verification
      summary: Returns a list of all verifications.
      parameters:
        - $ref: '#/components/parameters/paginationQueryParam'
        - $ref: '#/components/parameters/paginationFilterParam'
        - $ref: '#/components/parameters/paginationSortParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Verification'
      security:
      - bearerAuth: []
  /verifications/count:
     get:
        tags:
        - verification
        summary: Returns the amount of currently pending verifications.
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PendingCount'
  /verify/{user-id}:
    parameters:
    - name: user-id
      in: path
      description: The id of the user to verify
      required: true
      schema:
        type: integer
        format: int64
    post:
      tags:
      - verification
      summary: Creates a new Verification
      description: Inserts the first Rank assignment to a user.
      operationId: createVerification
      requestBody:
        description: Create the first verification object of a user
        content:
          '*/*':
            schema:
              type: object
              required:
                - rank_id
              properties:
                rank_id:
                  type: integer
                  format: int64
        required: true
      responses:
        201:
          description: Verification was sucessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verified user.
      security:
      - bearerAuth: []
components:
  parameters:
    paginationQueryParam:
      name: pagination
      in: query
      description: Paginates the content
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
          perPage:
            type: integer
    paginationFilterParam:
      name: filter
      in: query
      description: Filters the content
      required: false
      schema:
        type: object
        properties:
          fieldName:
            type: string
    paginationSortParam:
      name: sort
      in: query
      description: Sorts the content
      required: false
      schema:
        type: object
        properties:
          field:
            type: string
          order:
            type: string

  schemas:
    AnyValue:
      description: Can be any value - string, number or boolean
    Balance:
      type: object
      properties:
        balance:
          type: integer
          format: int64
        loss:
          type: integer
          format: int64
        profit:
          type: integer
          format: int64
        products:
          type: object
          properties:
            1:
              type: object
              properties:
                start_count:
                  minimum: 0
                  type: integer
                  format: int64
                end_count:
                  minimum: 0
                  type: integer
                  format: int64
                purchase_count:
                  minimum: 0
                  type: integer
                  format: int64
                purchase_sum_price:
                  type: integer
                  format: int64
                replenish_count:
                  minimum: 0
                  type: integer
                  format: int64
                difference:
                  type: integer
                  format: int64
                balance:
                  type: integer
                  format: int64
            2:
              type: object
    DepositOfUser:
      required:
      - id
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        comment:
          type: string
        id:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
    Deposit:
      allOf:
        - $ref: '#/components/schemas/DepositOfUser'
        - type: object
          properties:
            user_id:
              type: integer
              format: int64
    Payoff:
      required:
      - admin_id
      - amount
      - comment
      - id
      - revoked
      - timestamp
      properties:
        admin_id:
          type: "integer"
          format: "int64"
        amount:
          type: "integer"
          format: "int64"
        comment:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        revoked:
          type: "boolean"
        timestamp:
          type: "string"
          format: "date-time"
    PurchaseOfUser:
      type: object
      required:
      - id
      - timestamp
      - product_id
      - productprice
      - amount
      - revoked
      properties:
        id:
          type: "integer"
          format: "int64"
        timestamp:
          type: "string"
          format: "date-time"
        product_id:
          type: "integer"
          format: "int64"
        productprice:
          type: "integer"
          format: "int64"
        amount:
          type: "integer"
          format: "int64"
        revoked:
          type: "boolean"
    Purchase:
      allOf:
        - $ref: '#/components/schemas/PurchaseOfUser'
        - type: object
          required:
          - user_id
          properties:
            user_id:
              type: "integer"
              format: "int64"
    Product:
      required:
      - creation_date
      - id
      - name
      - price
      - tags
      type: object
      properties:
        active:
          type: boolean
        barcode:
          type: string
          example: "4004870070190"
        countable:
          type: boolean
        creation_date:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        imagename:
          type: string
          example: db2d6309800a5af05f9814bea1f5cea0.png
        name:
          type: string
        price:
          type: integer
          format: int64
        revocable:
          type: boolean
        tags:
          type: array
          items:
            type: integer
            format: int64
    Rank:
      required:
      - active
      - debt_limit
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        active:
          type: boolean
        debt_limit:
          type: integer
          format: int64
    RefundOfUser:
      required:
      - id
      - timestamp
      - total_price
      - comment
      - revoked
      - admin_id
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        total_price:
          type: integer
          format: int64
        comment:
          type: string
        revoked:
          type: boolean
        admin_id:
          type: integer
          format: int64
    Refund:
      allOf:
        - $ref: '#/components/schemas/RefundOfUser'
        - type: object
          required:
          - user_id
          properties:
            user_id:
              type: integer
              format: int64
    ReplenishmentNew:
      type: object
      required:
        - product_id
        - amount
        - total_price
      properties:
        amount:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        total_price:
          type: integer
          format: int64
    Replenishment:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        replcoll_id:
          type: integer
          format: int64
        total_price:
          type: integer
          format: int64
    ReplenishmentCollectionNew:
      type: object
      required:
        - replenishments
        - comment
      properties:
        comment:
          type: string
        replenishments:
          type: array
          items:
            $ref: '#/components/schemas/ReplenishmentNew'
    ReplenishmentCollectionBrief:
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
        comment:
          type: string
        id:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
    ReplenishmentCollection:
      allOf:
        - $ref: '#/components/schemas/ReplenishmentCollectionNew'
        - $ref: '#/components/schemas/ReplenishmentCollectionBrief'
        - type: object
          properties:
            replenishments:
              type: array
              items:
                $ref: '#/components/schemas/Replenishment'
    StocktakingUpdate:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
          format: int64
    StocktakingNew:
      allOf:
        - $ref: '#/components/schemas/StocktakingUpdate'
        - type: object
          required:
            - product_id
          properties:
            product_id:
              type: integer
              format: int64
            set_inactive:
              type: boolean
    Stocktaking:
      allOf:
        - $ref: '#/components/schemas/StocktakingUpdate'
        - type: object
          properties:
            collection_id:
              type: integer
              format: int64
            id:
              type: integer
              format: int64
            product_id:
              type: integer
              format: int64
    StocktakingCollectionNew:
      type: object
      properties:
        stocktakings:
          type: array
          items:
            $ref: '#/components/schemas/StocktakingNew'
        timestamp:
          type: string
          format: date-time
    StocktakingCollectionBrief:
      type: object
      properties:
        admin_id:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
    StocktakingCollection:
      allOf:
        - $ref: '#/components/schemas/StocktakingCollectionBrief'
        - type: object
          properties:
            revokehistory:
              type: array
              items:
                $ref: '#/components/schemas/StocktakingCollectionRevoke'
            stocktakings:
              type: array
              items:
                $ref: '#/components/schemas/Stocktaking'
    TagUpdateable:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: snacks
    Tag:
      allOf:
        - type: object
          required:
          - id
          properties:
            created_by:
              type: integer
              format: int64
            id:
              type: integer
              format: int64
        - $ref: '#/components/schemas/TagUpdateable'
    TurnoverNew:
      required:
      - amount
      - comment
      type: object
      properties:
        amount:
          type: integer
          format: int64
          example: 1
        comment:
          type: string
    TurnoverUpdateable:
      type: object
      properties:
        revoked:
          type: boolean
    TurnoverBase:
      allOf:
        - $ref: '#/components/schemas/TurnoverNew'
        - $ref: '#/components/schemas/TurnoverUpdateable'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            timestamp:
              type: string
              format: date-time
    UserError:
      required:
      - message
      - result
      type: object
      properties:
        message:
          type: string
          example: This user has not been verified yet.
        result:
          type: string
          enum:
          - error
    DeleteUserError:
      required:
      - message
      - result
      type: object
      properties:
        message:
          type: string
          example: There is no entry with this id.
        result:
          type: string
          enum:
          - error
    DeleteTagError:
      required:
      - message
      - result
      type: object
      properties:
        message:
          type: string
          example: The entry cannot be deleted.
        result:
          type: string
          enum:
          - error
    Revoke:
      required:
      - id
      - revoked
      - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int64
        revoked:
          type: boolean
        timestamp:
          type: string
          format: date-time
    PayoffRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    PurchaseRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    PendingCount:
      required:
      - id
      type: object
      properties:
        pending:
          type: integer
          format: int64
    RefundRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    ReplenishmentCollectionRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    StocktakingCollectionRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    TurnoverRevoke:
      allOf:
      - $ref: '#/components/schemas/Revoke'
    NewUser:
      type: object
      required:
        - lastname
      properties:
        lastname:
          type: string
        firstname:
          type: string
        password:
          type: string
        password_repeat:
          type: string
    UserUnpriv:
      type: object
      properties:
        firstname:
          type: string
          example: Paul Thomas
        lastname:
          type: string
          example: Mann
        rank_id:
          type: integer
          format: int64
    UserModify:
      allOf:
      - $ref: '#/components/schemas/UserUnpriv'
      - type: object
        properties:
          is_admin:
            type: boolean
    UserBrief:
      allOf:
      - $ref: '#/components/schemas/UserModify'
      - type: object
        properties:
          credit:
            type: integer
            format: int64
            description: Users credit in cents
          id:
            type: integer
            format: int64
          creation_date:
            type: string
            format: date-time
    UserFull:
      allOf:
      - $ref: '#/components/schemas/UserBrief'
      - type: object
        properties:
          verification_date:
            type: string
            format: date-time
    Verification:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
          example: Paul Thomas
        lastname:
          type: string
          example: Mann
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
